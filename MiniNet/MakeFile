# Project directories
SRC_DIR = src
BUILD_DIR = build
INCLUDE_DIR = include
PYTHON_DIR = python

# Compiler and flags
CC = gcc-14
CFLAGS = -O3 -march=native -funroll-loops -ftree-vectorize -fopenmp
LDFLAGS = 
PARALLEL_FLAG = 
DEBUG_FLAG = 
SHARED_FLAG = 
OUTPUT_FILE = 

# Target to compile shared library
SHARED_LIB = $(BUILD_DIR)/libnn.so

# Target to compile executable
EXEC_FILE = $(BUILD_DIR)/main

# Source files
SRC_FILES = $(shell find $(SRC_DIR) -name '*.c')

# Flags for parallelization
.PHONY: parallel
parallel:
	$(eval PARALLEL_FLAG = -DENABLE_PARALLEL)
	@echo "Compiling with parallelization enabled..."

# Flags for debugging
.PHONY: diag
diag:
	$(eval DEBUG_FLAG = -g)
	@echo "Debugging with lldb enabled..."

# Shared library target
.PHONY: shared
shared: 
	$(eval SHARED_FLAG = -shared -fPIC)
	$(eval OUTPUT_FILE = $(SHARED_LIB))
	@echo "Compiling as a shared library..."

# Executable target
.PHONY: executable
executable: 
	$(eval OUTPUT_FILE = $(EXEC_FILE))
	@echo "Compiling as an executable..."

# Default target to build project
.PHONY: all
all: $(OUTPUT_FILE)

# Rule to build the shared library or executable
$(OUTPUT_FILE): $(SRC_FILES)
	$(CC) $(CFLAGS) $(PARALLEL_FLAG) $(DEBUG_FLAG) $(SHARED_FLAG) -I$(INCLUDE_DIR) -o $(OUTPUT_FILE) $(SRC_FILES)

# Clean up compiled objects
.PHONY: clean
clean:
	rm -rf $(BUILD_DIR)/*.o $(BUILD_DIR)/main $(BUILD_DIR)/libnn.so
	@echo "Cleaned up compiled objects and executables."
